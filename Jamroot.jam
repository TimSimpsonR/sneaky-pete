
# Using environment variables isn't the best form, but its a start.
import os ;
local BOOST_ROOT = [ os.environ BOOST_ROOT ] ;
local LIB_HOME = [ os.environ LIB_HOME ] ;

using testing ;

project
	:	requirements
		<include>include
		<include>/usr/include
		<include>$(BOOST_ROOT)
		<variant>debug:<define>_DEBUG
	;

###############################################################################
#       Dependencies
###############################################################################


# System libraries are found automatically by our toolset (GCC).
# So for example, if you pass "-lrabbitmq" to gcc, here its "<name>rabbitmq."
lib lib_boost_thread : : <name>boost_thread ;
lib lib_boost_unit_test_framework : : <name>boost_unit_test_framework ;
lib lib_json : : <name>json ;
lib lib_mysqlcppconn : : <name>mysqlcppconn ;
lib lib_rabbitmq : : <name>rabbitmq ;
lib lib_uuid : : <name>uuid ;
lib lib_confuse : : <name>confuse ;

alias dependencies
	:   lib_json lib_rabbitmq lib_mysqlcppconn lib_uuid
	    lib_confuse
	;

alias test_dependencies
	:	lib_boost_unit_test_framework lib_boost_thread
	;


###############################################################################
#      Core Library and Unit Tests.
###############################################################################

lib lib_nova_json
    :   src/nova/json.cc
    ;

lib lib_nova_log
    :   src/nova/log.cc
    ;

unit-test apt_json_tests
    :   lib_json
        lib_nova_json
        lib_nova_log
        src/nova/guest/apt_json.cc
        src/nova/guest/apt_exception.cc
        tests/nova/guest/apt_json_tests.cc
        test_dependencies
    :   <define>BOOST_TEST_DYN_LINK
        <testing.launcher>"valgrind --leak-check=full"
	;

unit-test json_tests
    :   lib_json
        lib_nova_json
        tests/nova/json_tests.cc
        test_dependencies
    :   <define>BOOST_TEST_DYN_LINK
        <testing.launcher>"valgrind --leak-check=full"
	;

lib guest_lib
    :   src/nova/configfile.cc
        src/nova/json.cc
        src/nova/log.cc
        src/nova/guest/guest_exception.cc
        src/nova/guest/sql_guest.cc
        src/nova/rpc/amqp.cc
        src/nova/rpc/receiver.cc
        src/nova/rpc/sender.cc
    ;


###############################################################################
#      Functional Tests
###############################################################################

unit-test send_and_receive
	:	dependencies
        guest_lib
		test_dependencies
		tests/send_and_receive.cc
	:   <define>BOOST_TEST_DYN_LINK
        <testing.launcher>"valgrind --leak-check=full"
	;

unit-test sql_guest_tests
	:	dependencies
        guest_lib
		test_dependencies
		tests/sql_guest_tests.cc
	:   <define>BOOST_TEST_DYN_LINK
        <testing.launcher>"valgrind --leak-check=full"
	;

unit-test configfile_tests
	:	dependencies
        guest_lib
		test_dependencies
		tests/configfile_tests.cc
	:   <define>BOOST_TEST_DYN_LINK
        <testing.launcher>"valgrind --leak-check=full"
	;

unit-test log_tests
	:	dependencies
        guest_lib
		test_dependencies
		tests/log_tests.cc
	:   <define>BOOST_TEST_DYN_LINK
        <testing.launcher>"valgrind --leak-check=full"
	;


###############################################################################
#      Binaries
###############################################################################

run     dependencies
        guest_lib
        test_dependencies
        tests/memory_tests.cc
    :   # Command line arguments.
    :   # input files (?)
    :   <define>BOOST_TEST_DYN_LINK
    :   memory_tests  # The target name is placed here, for some reason. :(
    ;


exe receiver
	:	dependencies
		guest_lib
		src/receiver_daemon.cc
    :   #<dependency>sql_guest_tests
	   # <dependency>memory_tests
	;

exe sender
	:	dependencies
		guest_lib
		src/test_sender.cc
	:   #<link>shared:<dependency>sql_guest_tests
	    #<link>shared:<dependency>memory_tests
	;

# Run this in Valgrind to find possible leaks.
exe leak_tester
	:	dependencies
		guest_lib
		src/leak_tester.cc
	:   #<link>shared:<dependency>sql_guest_tests
	    #<link>shared:<dependency>memory_tests
	;

