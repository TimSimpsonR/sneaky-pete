
# Using environment variables isn't the best form, but its a start.
import os ;
local BOOST_ROOT = [ os.environ BOOST_ROOT ] ;
local LIB_HOME = [ os.environ LIB_HOME ] ;

using testing ;

project
	:	requirements
		<include>include
		<include>/usr/include
		<include>$(BOOST_ROOT)
		<variant>debug:<define>_DEBUG
        ;

###############################################################################
#       Dependencies
###############################################################################


# System libraries are found automatically by our toolset (GCC).
# So for example, if you pass "-lrabbitmq" to gcc, here its "<name>rabbitmq."
lib lib_boost_thread : : <name>boost_thread ;
lib lib_boost_unit_test_framework : : <name>boost_unit_test_framework ;
lib lib_confuse : : <name>confuse ;
lib lib_json : : <name>json ;
lib lib_mysqlcppconn : : <name>mysqlcppconn ;
lib lib_rabbitmq : : <name>rabbitmq ;
lib lib_rt : : <name>rt ;
lib lib_uuid : : <name>uuid ;


alias dependencies
	:   lib_json lib_rabbitmq lib_mysqlcppconn lib_uuid
	    lib_confuse
	;

alias test_dependencies
	:	lib_boost_unit_test_framework lib_boost_thread
	;


###############################################################################
#      Custom Rule
###############################################################################
# Because we compile certain unit tests with different properties,
# Boost's gives an error that we're duplicating a target name.  This is a
# safety feature used to avoid compiling the code in potentially different ways
# each builds (though here it doesn't matter):
# http://www.boost.org/boost-build2/doc/html/bbv2/faq/s02.html
# To get around it we have to create "obj" targets for each unit, and make
# any unit tests a dependency to ensure they execute.
# There does not seem to be a way out of compiling the object file twice-
# you can make the final target an alias of the original object, but because an
# alias alone cannot declare a dependency, a second object file is used. There
# is probably a way around this.

local rule unit ( name : sources * : dependencies * : test-sources *
                  :  test-properties * : env-vars * )
{
    if $(test-sources) > []
    {
        obj __unit_test_obj_$(name) : $(sources) : $(test-properties) ;
        unit-test __unit_tests_$(name)
            :   __unit_test_obj_$(name)
                $(test-sources)
                test_dependencies
                $(dependencies)
            :   <define>BOOST_TEST_DYN_LINK
                #<testing.launcher>"$(env-vars) valgrind --leak-check=full"
                <testing.launcher>"$(env-vars) "
                $(test-properties)
            ;
        obj __unit_obj_$(name) : $(sources)
            : <dependency>__unit_test_obj_$(name)
              <dependency>__unit_tests_$(name)
            ;
        alias $(name) :  __unit_obj_$(name) $(dependencies) ;
    }
    else
    {
        obj __unit_obj_$(name) : $(sources) ;
        alias $(name) :  __unit_obj_$(name) $(dependencies) ;
    }
}


###############################################################################
#      Core Library and Unit Tests.
###############################################################################

# Because we compile certain unit tests with different properties,
# Boost's gives an error that we're duplicating a target name.  This is a
# safety feature used to avoid compiling the code in potentially different ways
# each builds (though here it doesn't matter):
# http://www.boost.org/boost-build2/doc/html/bbv2/faq/s02.html
# To get around it we have to create "obj" targets for each unit, and make
# any unit tests a dependency to ensure they execute.
# "alias" creates a unique target but ensures we only build the obj file once.
# We make a unique object file if we compile the test version differently.


unit u_nova_guest_GuestException
    :   src/nova/guest/GuestException.cc
    ;

unit u_nova_configfile
    :   src/nova/configfile.cc
    :   lib_confuse
        u_nova_guest_GuestException
    :   tests/configfile_tests.cc
    ;

unit u_nova_utils_io
    :   src/nova/utils/io.cc
    :   u_nova_Log
    ;

unit u_nova_json
    : src/nova/json.cc
    : lib_json
    : tests/nova/json_tests.cc
    ;

unit u_nova_Log
    : src/nova/Log.cc
    :
    : tests/log_tests.cc
    ;


exe parrot
    :   u_nova_Log
        tests/nova/parrot.cc
    ;
unit u_nova_process
    :   src/nova/process.cc
    :   lib_rt
        u_nova_utils_io
        u_nova_Log
    :   tests/nova/process_tests.cc
    :   <dependency>parrot
        #<define>_NOVA_PROCESS_VERBOSE
    :   BOOST_TEST_CATCH_SYSTEM_ERRORS=no
    ;

unit u_nova_utils_regex
    :   src/nova/utils/regex.cc
    :
    :   tests/nova/utils/regex_tests.cc
    ;

unit u_nova_guest_apt_AptException
    :   src/nova/guest/apt/AptException.cc
    ;

unit u_nova_guest_apt_AptMessageHandler
    :   src/nova/guest/apt/AptMessageHandler.cc
    :   # lib_json # <-- this should be automatic...
        u_nova_guest_apt_AptException
        u_nova_json
        u_nova_Log
    :   tests/nova/guest/apt_json_tests.cc
    ;

unit u_nova_guest_apt_apt
    :   src/nova/guest/apt/apt.cc
    :   u_nova_Log
        u_nova_guest_apt_AptException
        u_nova_utils_io
        u_nova_process
        u_nova_utils_regex
    :   tests/nova/guest/apt_tests.cc
    :   #<define>_VERBOSE_NOVA_GUEST_APT
    :   # Boost fails this test because a process returns a non-zero exit code.
        # Its a bug thats been fixed in recent versions.
        #http://stackoverflow.com/questions/5325202/boostunit-test-case-fails-because-a-child-process-exits-with-nonzero
        BOOST_TEST_CATCH_SYSTEM_ERRORS=no
    ;

unit u_nova_rpc_amqp
    :   src/nova/rpc/amqp.cc
    :   lib_rabbitmq
    ;

unit u_nova_rpc_Sender
    :   src/nova/rpc/Sender.cc
    :   u_nova_rpc_amqp
        u_nova_json
        u_nova_Log
    ;

unit u_nova_rpc_Receiver
    :   src/nova/rpc/Receiver.cc
    :   u_nova_rpc_amqp
        u_nova_json
        u_nova_Log
    :   u_nova_rpc_Sender
        tests/send_and_receive.cc
    ;


unit u_nova_guest_mysql_misc
    :   src/nova/guest/mysql/misc.cc
    :   lib_uuid
    :   tests/nova/guest/mysql/mysql_unit_tests.cc
    ;


alias nova_guest_mysql_deps
    :   lib_mysqlcppconn
        u_nova_configfile
        u_nova_utils_io
        u_nova_guest_mysql_misc
        u_nova_Log
        u_nova_process
        u_nova_utils_regex
    ;

unit u_nova_guest_mysql_MySqlGuest
    :   src/nova/guest/mysql/MySqlGuest.cc
    :   nova_guest_mysql_deps
    ;

unit u_nova_guest_mysql_MySqlPreparer
    :   src/nova/guest/mysql/MySqlPreparer.cc
    :   nova_guest_mysql_deps
        u_nova_guest_apt_apt
        u_nova_guest_apt_AptException
        u_nova_configfile
        u_nova_guest_mysql_misc
        __unit_obj_u_nova_guest_mysql_MySqlGuest
    ;

unit u_nova_guest_mysql_MySqlMessageHandler
    :   src/nova/guest/mysql/MySqlMessageHandler.cc
    :   u_nova_guest_apt_apt
        u_nova_guest_apt_AptException
        u_nova_json
        nova_guest_mysql_deps
        lib_mysqlcppconn
        u_nova_guest_mysql_misc
        __unit_obj_u_nova_guest_mysql_MySqlGuest
        __unit_obj_u_nova_guest_mysql_MySqlPreparer
    :   tests/nova/guest/mysql/MySqlMessageHandlerTests.cc
    :   <define>__NOVA_GUEST_SQL_GUEST_DO_NOT_DEFINE_MYSQLGUEST
    ;

lib guest_lib
    :   u_nova_configfile
        u_nova_guest_apt_apt
        u_nova_guest_apt_AptMessageHandler
        u_nova_guest_apt_AptException
        u_nova_json
        u_nova_Log
        u_nova_guest_mysql_misc
        u_nova_guest_mysql_MySqlGuest
        u_nova_guest_mysql_MySqlMessageHandler
        u_nova_rpc_Receiver
        u_nova_utils_regex
        u_nova_rpc_Sender
    ;


###############################################################################
#      Functional Tests
###############################################################################


run     dependencies
        guest_lib
        test_dependencies
        tests/memory_tests.cc
    :   # Command line arguments.
    :   # input files (?)
    :   <define>BOOST_TEST_DYN_LINK
    :   memory_tests  # <-- The target name is placed here, for some reason. :(
    ;


###############################################################################
#      Integration Tests
###############################################################################

unit-test int_tests
    :   u_nova_Log
        #u_nova_guest_apt_apt
        #u_nova_guest_apt_AptException
        u_nova_guest_mysql_MySqlPreparer
        tests/nova/guest/mysql/mysql_integration_tests.cc
        test_dependencies
    :   <define>BOOST_TEST_DYN_LINK
        #<testing.launcher>"$(env-vars) valgrind --leak-check=full"
        <testing.launcher>"BOOST_TEST_CATCH_SYSTEM_ERRORS=no "
    ;

# Make it so this won't run unless we explicitly ask for it.
explicit int_tests ;

###############################################################################
#      Binaries
###############################################################################

exe apt_install
    :   u_nova_Log
        u_nova_guest_apt_apt
        u_nova_guest_apt_AptException
        tests/nova/guest/apt_install.cc
        u_nova_utils_io
        u_nova_process
        u_nova_utils_regex
        lib_rt
    :   <define>_NOVA_PROCESS_VERBOSE
    ;
explicit apt_install ;

exe receiver
	:	dependencies
		guest_lib
		src/receiver_daemon.cc
    :   #<dependency>sql_guest_tests
	   # <dependency>memory_tests
	;

exe sender
	:	dependencies
		guest_lib
		src/test_sender.cc
	:   #<link>shared:<dependency>sql_guest_tests
	    #<link>shared:<dependency>memory_tests
	;

# Run this in Valgrind to find possible leaks.
exe leak_tester
	:	dependencies
		guest_lib
		src/leak_tester.cc
	:   #<link>shared:<dependency>sql_guest_tests
	    #<link>shared:<dependency>memory_tests
	;
explicit leak_tester ;

