###############################################################################
#  -----------------------
#  Sneaky Pete Guest Agent
#  -----------------------
#
#  To build, install bjam and execute "bjam -d+2". "-d+2" is optional and will
#  show you each command executed by Boost Build.
#  To build in debug mode, use:
#      bjam -d+2
#  To build staticly, use:
#      bjam -d+2 release link=static nova-guest
#
#  There are extra settings which can be defined by environment variables. They
#  are as follows:
#    AGENT_DIR - Give this the absolute file path to the directory containing
#      this file (Jamroot.jam). Its needed for the Process tests.
#    TEST_ARGS - Assign this flag values. For example, if you set this to
#      --flagfile=blah.conf, then blah.conf will have its flag values loaded.
#      This is needed only for the integration tests.
#    DESTROY_MYSQL_ON_THIS_MACHINE - Set this to the string "PLEASE" to run
#      the MySQL preparation integration tests, which will uninstall and
#      destroy any installation of MySQL on this machine (all data will be
#      deleted).
#
#  Note on the Valgrind error:
#    ...
#    Syscall param timer_create(evp) points to uninitialised byte(s) "
#    ==5279==    at 0x4E2D0DD: timer_create@@GLIBC_2.3.3 (timer_create.c:99)
#    ...
#  This is a known issuewith the timer_create call. It is harmless and there
#  does not appear to be a way to disable the error.
#
###############################################################################


# Using environment variables isn't the best form, but its a start.
import os ;
using testing ;

import pch ;


SKIP_SNEAKY_TESTS = [ os.environ SKIP_SNEAKY_TESTS ] ;
VERSION_STRING = [ os.environ VERSION_STRING ] ;
if ! $(VERSION_STRING) {
    VERSION_STRING = "_v" ;
}


###############################################################################
#       Project Settings
###############################################################################

project
	:	requirements
		<include>src
		<include>/usr/include
		<include>/opt/sp-deps/libcurl/include
		<include>$(BOOST_ROOT)
		<variant>debug:<define>_DEBUG
        # The line below makes the Process class print all output.
        <define>_NOVA_PROCESS_VERBOSE
        #TODO: Add  -Wall -Wextra
        <cxxflags>" -std=c++0x -Werror -Wno-error=strict-aliasing -DNOVA_GUEST_VERSION=\"\\\"$(VERSION_STRING)\\\"\" "
        # Enable the very little bit of C++0x functionality available in GCC
        # 4.4.5 and turn warnings into errors except for strict-aliasing, which
        # unfortunatley issues false warnings as verified here:
        # http://stackoverflow.com/questions/15520642/using-stdmap-gives-warning-dereferencing-pointer-anonymous-does-break-str
        ;

# This meta-target is a precompiled header. Using it shaves a little bit of
# time off the build process. Nothing mind-blowing but every little bit helps.
cpp-pch pch
    : src/pch.hpp
    : <cxxflags>" -std=c++0x"
    ;



# A quick note about linking and the flags defined below.
# First, some libraries are included via Boost Build, while others are stated
# as flags to GCC directly. In the later case its because the given libraries
# won't "just work" in any configuration, and to build statically we must
# explicitly set them one way or another.
#
# These are pthread and dl.
#
# Next, statically linking the gcc lib is kind of tough. According to this:
# http://www.trilithium.com/johan/2005/06/static-libstdc/
# If gcc cannot find libgcc on the path, it will not statically link and
# will quietly give you a bigger executable. Exciting!
# The solution is "-static-libgcc" along with some of the stranger flags
# seen below.
local EXE_LINK_FLAGS = " -static-libgcc -L/home/vagrant/. -L/lib/. -L/usr/lib/gcc/x86_64-linux-gnu/4.4.3/. -lpthread -ldl" ;

###############################################################################
#       Dependencies
###############################################################################


# System libraries are found automatically by our toolset (GCC).
# So for example, if you pass "-lrabbitmq" to gcc, here its "<name>rabbitmq."

# Some libraries can't be staticly linked for various reasons.
# So we create aliases of them which we refer to them by, which force them to
# be dynamically linked.

lib lib_boost_thread : : <name>boost_thread ;
lib lib_boost_unit_test_framework : : <name>boost_unit_test_framework ;
lib lib_confuse : : <name>confuse ;
lib lib_json : : <name>json ;
lib lib_mysqlclient : : <name>mysqlclient ;

lib lib_rabbitmq : : <name>rabbitmq ;

lib lib_rt : : <name>rt ;
lib lib_uuid : : <name>uuid ;

alias dependencies
	:   lib_json lib_rabbitmq  lib_uuid lib_confuse lib_boost_thread
 	;

lib lib_pthread : : <name>pthread ; # Seems to only be needed in static builds
                                    # static builds also require lib_c.

lib lib_m : : <name>m ;
lib lib_stdc++ : : <name>stdc++ ;

lib lib_z : : <file>/usr/lib/libz.so.1 ;
# ubuntu specific
#lib lib_z : : <file>/lib/x86_64-linux-gnu/libz.so.1 ;
lib lib_c : : <name>c ;

lib lib_mysqlclient_r : : <file>/usr/lib/libmysqlclient.so.16.0.0 ;

# Note: In Ubuntu, use this:
# lib lib_mysqlclient_r :
#   : <file>/usr/lib/x86_64-linux-gnu/libmysqlclient_r.so.18.0.0 ;

lib lib_ssl : : <name>ssl ;

# Needed for curl.
lib lib_crypto : : <name>crypto ;
# lib lib_dl : : <name>dl ;  # <-- NOT the way to include libdl, see below.

# This is expected to be installed by the initialize process.
# TODO: (rmyers) make the statically linked curl work
lib lib_curl : : <file>"/opt/sp-deps/libcurl/lib/libcurl.a" ;

# Curl is a tricky dependency and will not compile statically unless it finds
# all of its buddies. Additionally, -ldl must be specified last on the linker
# line, so making it a lib target in Boost Build doesn't work.


lib lib_idn11 : : <name>idn ;

alias static_dependencies
	:   dependencies
	;

alias test_dependencies
	:	lib_boost_unit_test_framework lib_boost_thread
	;


###############################################################################
#      Custom Rule "Unit"
###############################################################################
# The rule "unit" lets us define a target related to a single object file which
# usually comes from one C++ source file, along with the source code for its
# unit tests.
#
# We could just have used the built-in "obj" rule, but this automatically adds
# a dependency on the precompiled header and also lets us optionally define
# a "unit-test" target by specifying the test sources, which is nice.
#
# Also, the resulting target isn't an "obj" but an "alias" to an obj.
# Because we compile a (very few) unit tests with different properties,
# Boost's gives an error that we're duplicating a target names if they use the
# same objs.  This is a safety feature used to avoid compiling the code in
# potentially different ways each builds (though here it doesn't matter):
# http://www.boost.org/boost-build2/doc/html/bbv2/faq/s02.html
# "alias" creates a unique target but ensures we only build the obj file once.
#
# Note also that unfortunately, the tests need to link to Boost Test
# dynamically, which means if you run the build with "link=static" some objects
# will also be built as "link=shared" to meet this requirement.
#
# Tests can be avoided by specifying a specific target when running bjam (i.e.
# nova-guest) or setting the environment variable SKIP_SNEAKY_TESTS.
#
# Note: This rule used to enforce that the unit tests were run for each
# object, but to do this it had to build the obj twice. This made things too
# slow and wasn't worth it.

local rule unit ( name : sources * : dependencies * : test-sources *
                  :  test-properties * : env-vars * : main-properties * )
{
    obj __unit_obj_$(name) : pch $(sources)
                           : $(main-properties) ;
    alias $(name) :  __unit_obj_$(name) $(dependencies) ;

    if ! $(SKIP_SNEAKY_TESTS) && $(test-sources) > []
    {
        unit-test unit_test_$(name)
            :   pch
                __unit_obj_$(name)
                $(test-sources)
                test_dependencies
                $(dependencies)
            :   <define>BOOST_TEST_DYN_LINK
                <testing.launcher>"BOOST_TEST_CATCH_SYSTEM_ERRORS=no $(env-vars) valgrind --leak-check=full"
                $(test-properties)
                <link>shared
            ;
    }
}


###############################################################################
#      Core Library and Unit Tests.
###############################################################################


unit u_nova_Log_limited
    : src/nova/Log.cc
    ;

unit u_nova_Log
    : u_nova_Log_limited
      src/nova/Log_rotate_files.cc
      pch
    : u_nova_guest_utils
      u_nova_utils_io
      lib_boost_thread
    : tests/log_tests.cc
      u_nova_utils_regex
    ;

unit u_nova_guest_GuestException
    :   src/nova/guest/GuestException.cc
    ;

unit u_nova_utils_regex
    :   src/nova/utils/regex.cc
    :
    :   tests/nova/utils/regex_tests.cc
    ;

unit u_nova_flags
    :   src/nova/flags.cc
    :   u_nova_guest_GuestException
        u_nova_utils_regex
    :   tests/nova/flags_tests.cc
    ;

unit u_nova_configfile
    :   src/nova/configfile.cc
    :   lib_confuse
        u_nova_guest_GuestException
    :   tests/configfile_tests.cc
    ;

unit u_nova_utils_io
    :   src/nova/utils/io.cc
    :   lib_rt
        u_nova_Log_limited  # The full version has a dependency on this module.
    ;

unit u_nova_json
    : src/nova/json.cc
    : lib_json
    : tests/nova/json_tests.cc
    ;

unit u_nova_utils_Md5
    : src/nova/utils/Md5.cc
    : lib_ssl
    : tests/nova/utils/Md5_tests.cc
    ;

unit u_nova_utils_Curl
    : src/nova/utils/Curl.cc
    : lib_curl
      lib_idn11
      lib_crypto
      lib_ssl
      lib_z
      #lib_dl
    ;

unit u_nova_utils_swift
    : src/nova/utils/swift.cc
    : u_nova_utils_Curl
      u_nova_utils_Md5
      u_nova_Log
    : tests/nova/utils/swift_tests.cc
    ;

unit u_nova_db_mysql
    : src/nova/db/mysql.cc
    : lib_z  # <-- needed by lib_mysqlclient
      lib_mysqlclient
      u_nova_Log
    ;

unit u_nova_guest_utils
    : src/nova/guest/utils.cc
    : u_nova_guest_GuestException
    ;

unit u_nova_utils_threads
    :   src/nova/utils/threads.cc
    :   u_nova_Log
    :   tests/nova/utils/threads_tests.cc
    ;

unit u_nova_utils_zlib
    :   src/nova/utils/zlib.cc
    :   u_nova_Log
        lib_z
    :   tests/nova/utils/zlib_tests.cc
    ;

unit u_nova_guest_HeartBeat
    :   src/nova/guest/HeartBeat.cc
    :   u_nova_db_mysql
        u_nova_guest_utils
    ;

exe parrot_e
    :   u_nova_Log
        tests/nova/parrot.cc
        pch
    :   <linkflags>$(EXE_LINK_FLAGS)
    ;


install parrot : parrot_e/<link>shared ;
unit u_nova_process
    :   src/nova/process.cc
    :   u_nova_utils_io
        u_nova_Log
    :   tests/nova/process_tests.cc
    :   <dependency>parrot/<link>shared
        <define>_NOVA_PROCESS_VERBOSE
    :   BOOST_TEST_CATCH_SYSTEM_ERRORS=no
    ;

unit u_nova_guest_apt_AptException
    :   src/nova/guest/apt/AptException.cc
    ;

unit u_nova_guest_apt_apt
    :   src/nova/guest/apt/apt.cc
    :   u_nova_Log
        u_nova_guest_apt_AptException
        u_nova_utils_io
        u_nova_process
        u_nova_utils_regex
    ;

unit u_nova_guest_apt_AptMessageHandler
    :   src/nova/guest/apt/AptMessageHandler.cc
    :   # lib_json # <-- this should be automatic...
        u_nova_guest_apt_apt
        u_nova_guest_apt_AptException
        u_nova_guest_GuestException
        u_nova_json
        u_nova_Log
    :   tests/nova/guest/apt_json_tests.cc
    ;

unit u_nova_rpc_amqp
    :   src/nova/rpc/amqp.cc
    :   lib_rabbitmq
    ;

unit u_nova_rpc_Sender
    :   src/nova/rpc/Sender.cc
    :   u_nova_rpc_amqp
        u_nova_json
        u_nova_Log
    ;

unit u_nova_rpc_Receiver
    :   src/nova/rpc/Receiver.cc
    :   u_nova_rpc_amqp
        u_nova_json
        u_nova_Log
    ;

unit u_nova_volume
    :   src/nova/VolumeManager.cc
    :   u_nova_Log
        u_nova_process
    :   tests/nova/guest/volume_tests.cc
    :   <define>BOOST_TEST_DYN_LINK
        <testing.launcher>"BOOST_TEST_CATCH_SYSTEM_ERRORS=no "
    ;

unit u_nova_guest_mysql_MySqlGuestException
    :   src/nova/guest/mysql/MySqlGuestException.cc
    ;

unit u_nova_guest_mysql_MySqlDatabase
    :   src/nova/guest/mysql/MySqlDatabase.cc
    ;

unit u_nova_guest_mysql_MySqlUser
    :   src/nova/guest/mysql/MySqlUser.cc
    ;

unit u_nova_guest_mysql_MySqlUserAttr
    :   src/nova/guest/mysql/MySqlUserAttr.cc
    ;

unit u_nova_guest_mysql_MySqlAdmin
    :   src/nova/guest/mysql/MySqlAdmin.cc
    :   lib_uuid
        u_nova_utils_io
        u_nova_Log
        u_nova_db_mysql
        u_nova_utils_regex
        u_nova_guest_mysql_MySqlDatabase
        u_nova_guest_mysql_MySqlGuestException
        u_nova_guest_mysql_MySqlUser
        u_nova_guest_mysql_MySqlUserAttr
    :   tests/nova/guest/mysql/MySqlAdminTests.cc
    ;

unit u_nova_guest_mysql_MySqlAppStatus
    :   src/nova/guest/mysql/MySqlAppStatus.cc
    :   lib_boost_thread
        u_nova_db_mysql
        u_nova_utils_io
        u_nova_process
        u_nova_guest_utils
    ;

unit u_nova_guest_mysql_MySqlApp
    :   src/nova/guest/mysql/MySqlApp.cc
    :   u_nova_guest_mysql_MySqlAdmin
        u_nova_guest_apt_apt
        u_nova_guest_apt_AptException
        u_nova_configfile
        u_nova_guest_mysql_MySqlAppStatus
        u_nova_guest_backup_BackupRestore
    ;

unit u_nova_guest_diagnostics_Interrogator
    :   src/nova/guest/diagnostics/Interrogator.cc
    :   u_nova_Log
        u_nova_guest_diagnostics_InterrogatorException
        u_nova_utils_io
        u_nova_utils_regex
    :   tests/nova/guest/diag_tests.cc
    :
    :
    :
    ;

unit u_nova_guest_diagnostics_InterrogatorException
    :   src/nova/guest/diagnostics/InterrogatorException.cc
    :   u_nova_guest_GuestException
    ;

unit u_nova_guest_diagnostics_InterrogatorMessageHandler
    :   src/nova/guest/diagnostics/InterrogatorMessageHandler.cc
    :   # lib_json # <-- this should be automatic...
        u_nova_guest_diagnostics_Interrogator
        u_nova_guest_GuestException
        u_nova_json
        u_nova_Log
    :
    :
    :
    :
    ;

unit u_nova_guest_diagnostics_DiagnosticsMessageHandler
    :   src/nova/guest/diagnostics/DiagnosticsMessageHandler.cc
    ;

unit u_nova_guest_backup_BackupException
    :   src/nova/guest/backup/BackupException.cc
    :   u_nova_guest_GuestException
    ;

unit u_nova_guest_backup_BackupManager
    :   src/nova/guest/backup/BackupManager.cc
    :   u_nova_Log
        u_nova_guest_backup_BackupException
        u_nova_utils_io
        u_nova_utils_regex
        u_nova_utils_zlib
    ;

unit u_nova_guest_backup_BackupRestore
    :   src/nova/guest/backup/BackupRestore.cc
    :   u_nova_Log
        u_nova_guest_backup_BackupException
        u_nova_process
        u_nova_utils_regex
        u_nova_utils_swift
        u_nova_utils_zlib
    ;

unit u_nova_guest_backup_BackupMessageHandler
    :   src/nova/guest/backup/BackupMessageHandler.cc
    :   # lib_json # <-- this should be automatic...
        u_nova_guest_diagnostics_Interrogator
    :
    :
    :
    :
    ;

unit u_nova_guest_monitoring_Status
    :   src/nova/guest/monitoring/status.cc
    :   u_nova_Log
    ;

unit u_nova_guest_monitoring_Monitoring
    :   src/nova/guest/monitoring/Monitoring.cc
    :   u_nova_Log
        u_nova_guest_apt_apt
        u_nova_guest_monitoring_MonitoringException
        u_nova_utils_io
        u_nova_utils_regex
    :   #tests/nova/guest/diag_tests.cc
    :
    :
    :
    ;

unit u_nova_guest_monitoring_MonitoringException
    :   src/nova/guest/monitoring/MonitoringException.cc
    :   u_nova_guest_GuestException
    ;

unit u_nova_guest_monitoring_MonitoringMessageHandler
    :   src/nova/guest/monitoring/MonitoringMessageHandler.cc
    :   # lib_json # <-- this should be automatic...
        u_nova_guest_monitoring_Monitoring
        u_nova_guest_monitoring_Status
        u_nova_guest_GuestException
        u_nova_json
        u_nova_Log
    :
    :
    :
    :
    ;

unit u_nova_guest_mysql_MySqlMessageHandler
    :   src/nova/guest/mysql/MySqlMessageHandler.cc
    :   u_nova_guest_apt_apt
        u_nova_guest_apt_AptException
        u_nova_json
        u_nova_db_mysql
        u_nova_guest_mysql_MySqlAdmin
        u_nova_guest_mysql_MySqlAppStatus
        u_nova_guest_mysql_MySqlApp
        u_nova_guest_monitoring_Monitoring
        u_nova_volume
    ;

alias guest_lib
    :   pch
        u_nova_guest_HeartBeat
        u_nova_configfile
        u_nova_flags
        u_nova_guest_apt_apt
        u_nova_guest_apt_AptMessageHandler
        u_nova_guest_apt_AptException
        u_nova_guest_diagnostics_DiagnosticsMessageHandler
        u_nova_guest_diagnostics_Interrogator
        u_nova_guest_diagnostics_InterrogatorException
        u_nova_guest_diagnostics_InterrogatorMessageHandler
        u_nova_guest_backup_BackupManager
        u_nova_guest_backup_BackupException
        u_nova_guest_backup_BackupMessageHandler
        u_nova_utils_swift
        u_nova_guest_monitoring_Status
        u_nova_guest_monitoring_Monitoring
        u_nova_guest_monitoring_MonitoringException
        u_nova_guest_monitoring_MonitoringMessageHandler
        u_nova_guest_utils
        u_nova_json
        u_nova_Log
        u_nova_guest_mysql_MySqlMessageHandler
        u_nova_rpc_Receiver
        u_nova_utils_regex
        u_nova_rpc_Sender
        u_nova_utils_threads
    ;



###############################################################################
#      Functional Tests
###############################################################################


# Doesn't require anything other than apt-get on the machine, but is brittle.
unit-test apt_tests
    :   pch
        u_nova_guest_apt_apt
        u_nova_flags
        tests/nova/guest/apt_tests.cc
        test_dependencies
    :   <define>_VERBOSE_NOVA_GUEST_APT
        # Boost fails this test because a process returns a non-zero exit code.
        # Its a bug thats been fixed in recent versions.
        #http://stackoverflow.com/questions/5325202/boostunit-test-case-fails-because-a-child-process-exits-with-nonzero
        <define>BOOST_TEST_DYN_LINK
        <testing.launcher>"BOOST_TEST_CATCH_SYSTEM_ERRORS=no "
        #" valgrind --leak-check=full"
    ;
explicit apt_tests ;

# Requires RabbitMQ server to be installed and running on localhost.
unit-test send_and_receive
    :   pch
        u_nova_flags
        u_nova_guest_GuestException
        u_nova_rpc_Receiver
        u_nova_rpc_Sender
        u_nova_json
        tests/send_and_receive.cc
        test_dependencies
    :   <define>BOOST_TEST_DYN_LINK
        <testing.launcher>"BOOST_TEST_CATCH_SYSTEM_ERRORS=no valgrind --leak-check=full"
    ;
explicit send_and_receive ;


# Requires MySQL to be installed with valid values in my.cnf.
# Run by setting an environment variable named "TEST_ARGS" to whatever nova
# flag settings you need (such as "--flagfile=blah.conf").
unit-test int_tests_mysql
    :   pch
        u_nova_Log
        #u_nova_guest_apt_apt
        #u_nova_guest_apt_AptException
        u_nova_flags
        u_nova_db_mysql
        tests/nova/guest/mysql/mysql_integration_simple_tests.cc
        test_dependencies
    :   <define>BOOST_TEST_DYN_LINK
        <testing.launcher>"BOOST_TEST_CATCH_SYSTEM_ERRORS=no valgrind --leak-check=full"
    ;
explicit int_tests_mysql ;


unit-test MySqlAppStatus_tests
    :   pch
        lib_boost_thread
        u_nova_flags
        u_nova_guest_mysql_MySqlGuestException
        u_nova_guest_mysql_MySqlAppStatus
        test_dependencies
        tests/nova/guest/mysql/MySqlAppStatus_tests.cc
        lib_boost_thread
    :   <define>BOOST_TEST_DYN_LINK
        <testing.launcher>"BOOST_TEST_CATCH_SYSTEM_ERRORS=no valgrind --leak-check=full"
    ;

explicit MySqlAppStatus_tests ;


unit-test HeartBeat_tests
    :   pch
        u_nova_flags
        u_nova_guest_HeartBeat
        test_dependencies
        tests/nova/guest/HeartBeat_tests.cc
    :   <define>BOOST_TEST_DYN_LINK
        <testing.launcher>"BOOST_TEST_CATCH_SYSTEM_ERRORS=no valgrind --leak-check=full"
    ;

explicit HeartBeat_tests ;


# Requires that mysql be utterly destroyed and reinstalled on the machine.
# TODO(tim.simpson) Reddwarf integration testing always tests this so I may
# remove it, since its so difficult to run and may just turn into an out-of-date
# pitfall for someone trying to run this code.
unit-test int_tests
    :   pch
        u_nova_flags
        u_nova_Log
        #u_nova_guest_apt_apt
        #u_nova_guest_apt_AptException
        u_nova_guest_mysql_MySqlApp
        tests/nova/guest/mysql/mysql_integration_tests.cc
        test_dependencies
    :   <define>BOOST_TEST_DYN_LINK
        <testing.launcher>"BOOST_TEST_CATCH_SYSTEM_ERRORS=no valgrind --leak-check=full"
    ;
explicit int_tests ;


# TODO(tim.simpson): Remove this. The results don't seem that usable anymore.
run     dependencies
        guest_lib
        test_dependencies
        tests/memory_tests.cc
    :   # Command line arguments.
    :   # input files (?)
    :   <define>BOOST_TEST_DYN_LINK
    :   memory_tests  # <-- The target name is placed here, for some reason. :(
    ;

explicit memory_tests ;


###############################################################################
#      Binaries
###############################################################################

exe nova_guest_diagnostics_interrogator_demo
    :   u_nova_guest_diagnostics_Interrogator
        u_nova_flags
        u_nova_Log
        tests/nova/guest/diag_demo.cc
        pch
    :   <linkflags>$(EXE_LINK_FLAGS)
    ;

exe nova_guest_utils_demo
    :   u_nova_guest_utils
        u_nova_flags
        u_nova_Log
        tests/nova/guest/utils_demo.cc
        pch
    :   <linkflags>$(EXE_LINK_FLAGS)
    ;

exe nova_process_fd_demo
    :   pch
        u_nova_guest_utils
        u_nova_flags
        u_nova_Log
        u_nova_process
        lib_boost_thread
        tests/nova/process_fd_demo.cc
    :   <linkflags>$(EXE_LINK_FLAGS)
    ;

exe apt_install
    :   pch
        u_nova_Log
        u_nova_guest_apt_apt
        u_nova_guest_apt_AptException
        tests/nova/guest/apt_install.cc
        u_nova_utils_io
        u_nova_process
        u_nova_utils_regex
        lib_rt
    :   <define>_NOVA_PROCESS_VERBOSE
    ;
explicit apt_install ;


unit obj_receiver_daemon
    :   src/receiver_daemon.cc
    ;

exe receiver
    :   pch
        dependencies
        guest_lib
        obj_receiver_daemon
    :  <linkflags>$(EXE_LINK_FLAGS)
    ;

exe nova-guest
	:	static_dependencies
        #dependencies
		guest_lib
        obj_receiver_daemon
        lib_m
        lib_c
        pch
    :   <linkflags>$(EXE_LINK_FLAGS)
	;

# Run this in Valgrind to find possible leaks.
exe leak_tester
	:	pch
        dependencies
		guest_lib
		src/leak_tester.cc
	:   #<link>shared:<dependency>sql_guest_tests
	    #<link>shared:<dependency>memory_tests
	;

# Run this to find out how much memory is availble in the container
exe greedy_pete
    :   pch
        u_nova_guest_diagnostics_Interrogator
        src/greedy_pete.cc
    :
        <linkflags>$(EXE_LINK_FLAGS)
    ;

explicit leak_tester ;



exe upload_file
    :   pch
        tests/upload_file.cc
        u_nova_utils_swift
        u_nova_utils_Md5
        u_nova_Log
    :   <linkflags>$(EXE_LINK_FLAGS)
    ;

exe download_file
    :   pch
        tests/download_file.cc
        u_nova_utils_swift
        u_nova_utils_Md5
        u_nova_Log
    :   <linkflags>$(EXE_LINK_FLAGS)
    ;

# Run this to manually test the monitoring calls
exe centi-pete
    :   pch
        static_dependencies
        u_nova_guest_monitoring_Status
        u_nova_guest_monitoring_Monitoring
        u_nova_process
        src/centi_pete.cc
    :
        <linkflags>$(EXE_LINK_FLAGS)
    ;

exe format_file
    :   pch
        u_nova_volume
        u_nova_Log
        tests/format.cc

    :   <linkflags>$(EXE_LINK_FLAGS)
    ;

exe mount_file
    :   pch
        u_nova_volume
        u_nova_Log
        tests/mount.cc

    :   <linkflags>$(EXE_LINK_FLAGS)
    ;