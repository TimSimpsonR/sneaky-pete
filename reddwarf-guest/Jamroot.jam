###############################################################################
#  -----------------------
#  Sneaky Pete Guest Agent
#  -----------------------
#
#  To build, install bjam and execute "bjam -d+2". "-d+2" is optional and will
#  show you each command executed by Boost Build.
#  To build in debug mode, use:
#      bjam -d+2
#  To build staticly, use:
#      bjam -d+2 release link=static nova-guest
#
#  There are extra settings which can be defined by environment variables. They
#  are as follows:
#    AGENT_DIR - Give this the absolute file path to the directory containing
#      this file (Jamroot.jam). Its needed for the Process tests.
#    TEST_ARGS - Assign this flag values. For example, if you set this to
#      --flagfile=blah.conf, then blah.conf will have its flag values loaded.
#      This is needed only for the integration tests.
#    DESTROY_MYSQL_ON_THIS_MACHINE - Set this to the string "PLEASE" to run
#      the MySQL preparation integration tests, which will uninstall and
#      destroy any installation of MySQL on this machine (all data will be
#      deleted).
#
#  Note on the Valgrind error:
#    ...
#    Syscall param timer_create(evp) points to uninitialised byte(s) "
#    ==5279==    at 0x4E2D0DD: timer_create@@GLIBC_2.3.3 (timer_create.c:99)
#    ...
#  This is a known issuewith the timer_create call. It is harmless and there
#  does not appear to be a way to disable the error.
#
###############################################################################


# Using environment variables isn't the best form, but its a start.
import os ;
using testing ;

local TEST_LAUNCHER = "BOOST_TEST_CATCH_SYSTEM_ERRORS=no $(env-vars) valgrind --leak-check=full" ;

project
	:	requirements
		<include>include
		<include>/usr/include
		<include>$(BOOST_ROOT)
		<variant>debug:<define>_DEBUG
        # Uncomment the line below to make the Process class print all output.
        <define>_NOVA_PROCESS_VERBOSE
        ;

###############################################################################
#       Dependencies
###############################################################################


# System libraries are found automatically by our toolset (GCC).
# So for example, if you pass "-lrabbitmq" to gcc, here its "<name>rabbitmq."

# Some libraries can't be staticly linked for various reasons.
# So we create aliases of them which we refer to them by, which force them to
# be dynamically linked.

lib lib_boost_thread : : <name>boost_thread ;
lib lib_boost_unit_test_framework : : <name>boost_unit_test_framework ;
lib lib_confuse : : <name>confuse ;
lib lib_json : : <name>json ;
lib lib_mysqlclient : : <name>mysqlclient ;

lib lib_rabbitmq : : <name>rabbitmq ;

lib lib_rt : : <name>rt ;
lib lib_uuid : : <name>uuid ;

alias dependencies
	:   lib_json lib_rabbitmq  lib_uuid lib_confuse
 	;

###lib libo_c : : <name>c ;  # Only needed to make pthread work in static builds.
###alias lib_c : libo_c/<link>shared ;

lib lib_pthread : : <name>pthread ; # Seems to only be needed in static builds
                                    # static builds also require lib_c.
###alias lib_pthread : libo_pthread/<link>shared ;

###lib lib_m : : <name>m-2.11.1 ;
lib lib_m : : <name>m ;
lib lib_stdc++ : : <name>stdc++ ;
###lib lib_gcc_s : : <name>gcc_s ;

###lib lib_crypt : : <name>crypt-2.11.1 ;
#lib lib_crypt : : <file>/lib/libcrypt-2.11.1.so ;
###lib lib_z : : <name>z ;
###lib lib_c : : <name>c-2.11.1 ;
lib lib_z : : <file>/usr/lib/libz.so.1 ;
lib lib_c : : <name>c ;

###lib lib_mysqlclient_r : : <file>/usr/lib/libmysqlclient_r.so.16.0.0 ;
lib lib_mysqlclient_r : : <file>/usr/lib/libmysqlclient.so.16.0.0 ;

# I think I need this to statically bring in lib_mysqlcppcon
###lib lib_mysql : : <name>mysql ;


# The code stuff
# lib lib_gcc_s : : <file>/lib/libgcc_s.so.1 ;  #< -- LOL, not possible
# lib lib_c : : <file>/lib/libc.so.6 ;

alias static_dependencies
	:   dependencies
        # pthread fun
        #lib_pthread
        #lib_c/<link>static

        #lib_gcc_s/<link>static
        #lib_c/<link>static
        #lib_m/<link>static
        #lib_stdc++/<link>static

        #lib_mysqlclient_r
        #lib_mysql
        # Needed by libmysqlconn+++ whatever
        #  lib_z/<link>static
        #  lib_crypt/<link>static
	;

alias test_dependencies
	:	lib_boost_unit_test_framework lib_boost_thread
	;


###############################################################################
#      Custom Rule
###############################################################################
# Because we compile certain unit tests with different properties,
# Boost's gives an error that we're duplicating a target name.  This is a
# safety feature used to avoid compiling the code in potentially different ways
# each builds (though here it doesn't matter):
# http://www.boost.org/boost-build2/doc/html/bbv2/faq/s02.html
# To get around it we have to create "obj" targets for each unit, and make
# any unit tests a dependency to ensure they execute.
# There does not seem to be a way out of compiling the object file twice-
# you can make the final target an alias of the original object, but because an
# alias alone cannot declare a dependency, a second object file is used. There
# is probably a way around this.

local rule unit ( name : sources * : dependencies * : test-sources *
                  :  test-properties * : env-vars * )
{
    if $(test-sources) > []
    {
        obj __unit_test_obj_$(name) : $(sources) : $(test-properties) ;
        unit-test __unit_tests_$(name)
            :   __unit_test_obj_$(name)
                $(test-sources)
                test_dependencies
                $(dependencies)
            :   <define>BOOST_TEST_DYN_LINK
                #<testing.launcher>"$(TEST_LAUNCHER)"
                <testing.launcher>"BOOST_TEST_CATCH_SYSTEM_ERRORS=no $(env-vars) valgrind --leak-check=full"
                #<testing.launcher>"valgrind --leak-check=full"
                #<testing.launcher>"$(env-vars) "
                $(test-properties)
            ;
        explicit __unit_tests_$(name) ;
        obj __unit_obj_$(name) : $(sources)
            : <dependency>__unit_test_obj_$(name)
              # Be sure to force the unit tests we require to be shared,
              # or it will fail on static builds.
              <dependency>__unit_tests_$(name)/<link>shared
            ;
        alias $(name) :  __unit_obj_$(name) $(dependencies) ;
    }
    else
    {
        obj __unit_obj_$(name) : $(sources) ;
        alias $(name) :  __unit_obj_$(name) $(dependencies) ;
    }
}


###############################################################################
#      Core Library and Unit Tests.
###############################################################################

# Because we compile certain unit tests with different properties,
# Boost's gives an error that we're duplicating a target name.  This is a
# safety feature used to avoid compiling the code in potentially different ways
# each builds (though here it doesn't matter):
# http://www.boost.org/boost-build2/doc/html/bbv2/faq/s02.html
# To get around it we have to create "obj" targets for each unit, and make
# any unit tests a dependency to ensure they execute.
# "alias" creates a unique target but ensures we only build the obj file once.
# We make a unique object file if we compile the test version differently.


unit u_nova_guest_GuestException
    :   src/nova/guest/GuestException.cc
    ;

unit u_nova_utils_regex
    :   src/nova/utils/regex.cc
    :
    :   tests/nova/utils/regex_tests.cc
    ;

unit u_nova_flags
    :   src/nova/flags.cc
    :   u_nova_guest_GuestException
        u_nova_utils_regex
    :   tests/nova/flags_tests.cc
    ;

unit u_nova_configfile
    :   src/nova/configfile.cc
    :   lib_confuse
        u_nova_guest_GuestException
    :   tests/configfile_tests.cc
    ;

unit u_nova_utils_io
    :   src/nova/utils/io.cc
    :   u_nova_Log
    ;

unit u_nova_json
    : src/nova/json.cc
    : lib_json
    : tests/nova/json_tests.cc
    ;

unit u_nova_Log
    : src/nova/Log.cc
    :
    : tests/log_tests.cc
    ;

unit u_nova_guest_utils
    : src/nova/guest/utils.cc
    : u_nova_guest_GuestException
    ;

exe parrot_e
    :   u_nova_Log
        tests/nova/parrot.cc
    ;
install parrot : parrot_e/<link>shared ;
unit u_nova_process
    :   src/nova/process.cc
    :   lib_rt
        u_nova_utils_io
        u_nova_Log
    :   tests/nova/process_tests.cc
    :   <dependency>parrot/<link>shared
        #<define>_NOVA_PROCESS_VERBOSE
    :   BOOST_TEST_CATCH_SYSTEM_ERRORS=no
    ;

unit u_nova_guest_apt_AptException
    :   src/nova/guest/apt/AptException.cc
    ;

unit u_nova_guest_apt_apt
    :   src/nova/guest/apt/apt.cc
    :   u_nova_Log
        u_nova_guest_apt_AptException
        u_nova_utils_io
        u_nova_process
        u_nova_utils_regex
    :   tests/nova/guest/apt_tests.cc
    :   #<define>_VERBOSE_NOVA_GUEST_APT
    :   # Boost fails this test because a process returns a non-zero exit code.
        # Its a bug thats been fixed in recent versions.
        #http://stackoverflow.com/questions/5325202/boostunit-test-case-fails-because-a-child-process-exits-with-nonzero
        BOOST_TEST_CATCH_SYSTEM_ERRORS=no
    ;

unit u_nova_guest_apt_AptMessageHandler
    :   src/nova/guest/apt/AptMessageHandler.cc
    :   # lib_json # <-- this should be automatic...
        u_nova_guest_apt_apt
        u_nova_guest_apt_AptException
        u_nova_guest_GuestException
        u_nova_json
        u_nova_Log
    :   tests/nova/guest/apt_json_tests.cc
    ;

unit u_nova_rpc_amqp
    :   src/nova/rpc/amqp.cc
    :   lib_rabbitmq
    ;

unit u_nova_rpc_Sender
    :   src/nova/rpc/Sender.cc
    :   u_nova_rpc_amqp
        u_nova_json
        u_nova_Log
    ;

unit u_nova_rpc_Receiver
    :   src/nova/rpc/Receiver.cc
    :   u_nova_rpc_amqp
        u_nova_json
        u_nova_Log
    :   # u_nova_rpc_Sender
        # tests/send_and_receive.cc
    ;


unit u_nova_guest_mysql_misc
    :   src/nova/guest/mysql/misc.cc
    :   lib_uuid
    :   tests/nova/guest/mysql/mysql_unit_tests.cc
    ;

unit u_nova_guest_mysql_MySqlConnection
    :   src/nova/guest/mysql/MySqlConnection.cc
    :   u_nova_Log
        u_nova_guest_mysql_misc
        lib_mysqlclient
    ;


alias nova_guest_mysql_deps
    :   u_nova_guest_mysql_MySqlConnection
        # u_nova_configfile
        u_nova_utils_io
        u_nova_guest_mysql_misc
        u_nova_Log
        # u_nova_process
        u_nova_utils_regex
    ;

unit u_nova_guest_mysql_MySqlGuest
    :   src/nova/guest/mysql/MySqlGuest.cc
    :   nova_guest_mysql_deps
    ;

unit u_nova_guest_mysql_MySqlPreparer
    :   src/nova/guest/mysql/MySqlPreparer.cc
    :   nova_guest_mysql_deps
        u_nova_guest_apt_apt
        u_nova_guest_apt_AptException
        u_nova_configfile
        u_nova_guest_mysql_misc
        __unit_obj_u_nova_guest_mysql_MySqlGuest
    ;

unit u_nova_guest_mysql_MySqlMessageHandler
    :   src/nova/guest/mysql/MySqlMessageHandler.cc
    :   u_nova_guest_apt_apt
        u_nova_guest_apt_AptException
        u_nova_json
        nova_guest_mysql_deps
        u_nova_guest_mysql_misc
        __unit_obj_u_nova_guest_mysql_MySqlGuest
        __unit_obj_u_nova_guest_mysql_MySqlPreparer
    :   tests/nova/guest/mysql/MySqlMessageHandlerTests.cc
    :   <define>__NOVA_GUEST_SQL_GUEST_DO_NOT_DEFINE_MYSQLGUEST
    ;
#explicit u_nova_guest_mysql_MySqlMessageHandler ;


alias guest_lib
    :   u_nova_configfile
        u_nova_flags
        u_nova_guest_apt_apt
        u_nova_guest_apt_AptMessageHandler
        u_nova_guest_apt_AptException
        u_nova_guest_utils
        u_nova_json
        u_nova_Log
        u_nova_guest_mysql_misc
        u_nova_guest_mysql_MySqlConnection
        u_nova_guest_mysql_MySqlGuest
        u_nova_guest_mysql_MySqlMessageHandler
        u_nova_rpc_Receiver
        u_nova_utils_regex
        u_nova_rpc_Sender
    ;


###############################################################################
#      Functional Tests
###############################################################################


run     dependencies
        guest_lib
        test_dependencies
        tests/memory_tests.cc
    :   # Command line arguments.
    :   # input files (?)
    :   <define>BOOST_TEST_DYN_LINK
    :   memory_tests  # <-- The target name is placed here, for some reason. :(
    ;

explicit memory_tests ;

###############################################################################
#      Integration Tests
###############################################################################

unit-test int_tests_mysql
    :   u_nova_Log
        #u_nova_guest_apt_apt
        #u_nova_guest_apt_AptException
        u_nova_flags
        u_nova_guest_mysql_MySqlConnection
        tests/nova/guest/mysql/mysql_integration_simple_tests.cc
        test_dependencies
    :   <define>BOOST_TEST_DYN_LINK
        #<testing.launcher>"$(env-vars) valgrind --leak-check=full"
        <testing.launcher>"BOOST_TEST_CATCH_SYSTEM_ERRORS=no valgrind --leak-check=full"
        #<testing.launcher>"$(TEST_LAUNCHER)"
    ;

explicit int_tests_mysql ;

unit-test int_tests
    :   u_nova_flags
        u_nova_Log
        #u_nova_guest_apt_apt
        #u_nova_guest_apt_AptException
        u_nova_guest_mysql_MySqlPreparer
        tests/nova/guest/mysql/mysql_integration_tests.cc
        test_dependencies
    :   <define>BOOST_TEST_DYN_LINK
        #<testing.launcher>"$(env-vars) valgrind --leak-check=full"
        <testing.launcher>"BOOST_TEST_CATCH_SYSTEM_ERRORS=no valgrind --leak-check=full"
        #<testing.launcher>"$(TEST_LAUNCHER)"
    ;

# Make it so this won't run unless we explicitly ask for it.
explicit int_tests ;

###############################################################################
#      Binaries
###############################################################################

exe start_up
    :   u_nova_guest_utils
        u_nova_flags
        tests/nova/guest/start_up.cc
    ;

exe apt_install
    :   u_nova_Log
        u_nova_guest_apt_apt
        u_nova_guest_apt_AptException
        tests/nova/guest/apt_install.cc
        u_nova_utils_io
        u_nova_process
        u_nova_utils_regex
        lib_rt
    :   <define>_NOVA_PROCESS_VERBOSE
    ;
explicit apt_install ;


obj obj_receiver_daemon
    :   src/receiver_daemon.cc
    ;

exe receiver
    :   dependencies
        guest_lib
        obj_receiver_daemon
    :   #<dependency>sql_guest_tests
       # <dependency>memory_tests
       <linkflags>"-pthread "
    ;

exe nova-guest
	:	static_dependencies
        #dependencies
		guest_lib
        obj_receiver_daemon
        lib_z
        lib_m
        lib_c
        #lib_pthread
    :   #<dependency>sql_guest_tests
	   # <dependency>memory_tests
        #<linkflags>"-static -pthread -static-libgcc -L~/." #" -static-libgcc "

        # Some explanation is in order.
        # http://www.trilithium.com/johan/2005/06/static-libstdc/
        # If it cannot find libgcc on the path, it will not statically link it
        # and quietly give you a bigger executable. :D !!

        # Adding "-static" should statically link in the pthread stuff but
        # instead it makes an executable that won't load, which is also a neat
        # feature.
        # "-pthread" makes the thread stuff get brought in without specifying
        # libraries.

        <linkflags>" -static-libgcc -L/home/vagrant/. -L/lib/. -L/usr/lib/gcc/x86_64-linux-gnu/4.4.3/. -lpthread " #-static -lpthread -lz " #" -static-libgcc " #static-libstdc++"

	;

#exe receiver
#    :   dependencies
#        u_nova_configfile/<link>static
#        u_nova_guest_apt_apt/<link>static
#        u_nova_guest_apt_AptMessageHandler/<link>static
#        u_nova_guest_apt_AptException/<link>static
#        u_nova_json/<link>static
#        u_nova_Log/<link>static
#        u_nova_guest_mysql_misc/<link>static
#        u_nova_guest_mysql_MySqlGuest/<link>static
#        u_nova_guest_mysql_MySqlMessageHandler/<link>shared
#        u_nova_rpc_Receiver/<link>static
#        u_nova_utils_regex/<link>static
#        u_nova_rpc_Sender/<link>static
#        src/receiver_daemon.cc/<link>static
#   :   #<dependency>sql_guest_tests
#       # <dependency>memory_tests
#    ;


exe sender
	:	dependencies
		guest_lib
		src/test_sender.cc
	:   #<link>shared:<dependency>sql_guest_tests
	    #<link>shared:<dependency>memory_tests
	;

# Run this in Valgrind to find possible leaks.
exe leak_tester
	:	dependencies
		guest_lib
		src/leak_tester.cc
	:   #<link>shared:<dependency>sql_guest_tests
	    #<link>shared:<dependency>memory_tests
	;
explicit leak_tester ;

